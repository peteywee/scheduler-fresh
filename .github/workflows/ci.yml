name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10.17.1"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Enable Corepack
        run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Lint
        run: pnpm lint --max-warnings=0

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm format:check

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm typecheck

  unit:
    runs-on: ubuntu-latest
    needs: [lint, format, typecheck]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - name: Unit Tests (Vitest)
        env:
          NODE_ENV: test
        run: pnpm test:run || pnpm test

  rules:
    runs-on: ubuntu-latest
    needs: [lint, format, typecheck]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - name: Firestore Rules Tests
        env:
          NODE_ENV: test
        run: pnpm test:rules

  coverage:
    runs-on: ubuntu-latest
    needs: [unit]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - name: Coverage (lcov)
        run: pnpm test:coverage || true
      - name: Upload coverage lcov
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage/lcov.info
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: [unit, rules]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile --prod=false
      - name: Build App
        env:
          NEXT_TELEMETRY_DISABLED: "1"
        run: pnpm build
      - name: Secret Scan (gitleaks)
        run: pnpm gitleaks:scan

  functions:
    runs-on: ubuntu-latest
    needs: [lint, format, typecheck]
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint
      - run: pnpm typecheck
      - run: pnpm build

  drift:
    runs-on: ubuntu-latest
    needs: [lint, format, typecheck]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm run watch:drift

  e2e:
    name: Playwright E2E
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - run: pnpm install --frozen-lockfile
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      - name: Run E2E Tests
        env:
          CI: "1"
          NEXT_TELEMETRY_DISABLED: "1"
        run: pnpm test:e2e --reporter=line
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7

  all-checks:
    runs-on: ubuntu-latest
    needs: [build, functions, drift, e2e]
    steps:
      - run: echo "All CI checks passed âœ…"
