{
  "id": "WT-305-MIGRATION",
  "title": "WT-305 One-Time Repository Migration & Skeleton Finalization",
  "description": "Performs one-time merge (known-good ‚Üí develop ‚Üí main), validates DeepSource, toolchain, security, and CI. Promotes green develop to main, then self-cleans the migration directory.",
  "target_branch": "develop",
  "merge_flow": ["known-good", "develop", "main"],
  "self_destruct": true,
  "phases": [
    {
      "phase": "phase0_deepsource_verify",
      "label": "Phase 0 ‚Äî Validate DeepSource Configuration",
      "commands": [
        "echo 'üîç Validating DeepSource configuration...'",
        "test -f .deepsource.toml || { echo '‚ùå Missing .deepsource.toml'; exit 1; }",
        "grep -q '\\[\\[analyzers\\]\\]' .deepsource.toml || { echo '‚ùå No analyzers defined in .deepsource.toml'; exit 1; }",
        "pnpm run test:coverage || echo '‚ö†Ô∏è Coverage generation failed (non-blocking)'",
        "echo '‚úÖ DeepSource configuration validated.'"
      ]
    },
    {
      "phase": "phase1_verify_toolchain",
      "label": "Phase 1 ‚Äî Verify Node Toolchain",
      "commands": [
        "bash scripts/tasks/check-node-toolchain.sh || (echo '‚ùå Toolchain validation failed'; exit 1)"
      ]
    },
    {
      "phase": "phase2_flatten_repo",
      "label": "Phase 2 ‚Äî Flatten Repository",
      "commands": [
        "bash scripts/tasks/flatten-project.sh || true",
        "rm -rf .pnpm-store *.zip *.tar.gz || true",
        "mv scheduler-fresh/scheduler-fresh/* . 2>/dev/null || true",
        "rm -rf scheduler-fresh/scheduler-fresh || true"
      ]
    },
    {
      "phase": "phase3_merge_known_good",
      "label": "Phase 3 ‚Äî Merge 'known-good' into 'develop'",
      "commands": [
        "git fetch origin",
        "git checkout develop",
        "git merge origin/known-good --no-ff || true",
        "pnpm install",
        "pnpm run lint",
        "pnpm run test",
        "pnpm run build",
        "git add .",
        "git commit -m 'Merge known-good into develop (WT-305 Migration)' || true"
      ]
    },
    {
      "phase": "phase4_delete_known_good",
      "label": "Phase 4 ‚Äî Delete Known-Good Branch",
      "commands": [
        "git branch -D known-good || true",
        "git push origin --delete known-good || true"
      ]
    },
    {
      "phase": "phase5_override_main",
      "label": "Phase 5 ‚Äî Promote Verified Develop to Main",
      "commands": [
        "git checkout main",
        "git reset --hard develop",
        "pnpm run build",
        "git push origin main --force-with-lease"
      ]
    },
    {
      "phase": "phase6_validate_final",
      "label": "Phase 6 ‚Äî Validate and Tag Skeleton",
      "commands": [
        "pnpm run lint",
        "pnpm run test",
        "pnpm run build",
        "pnpm run gitleaks:scan || true",
        "git tag -a v0.1.0-clean -m 'WT-305 Skeleton Baseline'",
        "git push origin v0.1.0-clean"
      ]
    },
    {
      "phase": "phase7_cleanup",
      "label": "Phase 7 ‚Äî Self-Cleanup",
      "commands": [
        "if git diff --quiet main develop && pnpm run build; then",
        "  echo '‚úÖ Main is green and canonical. Removing migration directory...';",
        "  rm -rf migration || true;",
        "else",
        "  echo '‚ö†Ô∏è Cleanup skipped ‚Äî migration verification failed.';",
        "fi"
      ]
    }
  ],
  "acceptance_criteria": [
    "DeepSource analyzers configured and passing",
    "Toolchain verified (Node, pnpm, npx, corepack available)",
    "Repository flattened and cleaned",
    "Known-good merged and deleted",
    "Only main and develop branches remain",
    "Build/test/lint all green",
    "Gitleaks scan passes",
    "Main is canonical with develop",
    "Tag v0.1.0-clean created",
    "Migration directory deleted on success"
  ],
  "success_condition": {
    "branches": ["main", "develop"],
    "tag": "v0.1.0-clean",
    "ci_status": "green",
    "deepsource": "passing",
    "gitleaks": "clean",
    "self_destruct": "executed"
  }
}
