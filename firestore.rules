rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function orgMemberPath(orgId) {
      return /databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid);
    }

    function userDocPath(uid) {
      return /databases/$(database)/documents/users/$(uid);
    }

    function userOrgMatches(orgId) {
      return isSignedIn()
        && exists(userDocPath(request.auth.uid))
        && get(userDocPath(request.auth.uid)).data.orgId == orgId;
    }

    function orgMembership(orgId) {
      return isSignedIn() && exists(orgMemberPath(orgId));
    }

    function orgRole(orgId) {
      return orgMembership(orgId) ? get(orgMemberPath(orgId)).data.role : null;
    }

    function hasOrgRole(orgId, roles) {
      return orgMembership(orgId) && (orgRole(orgId) in roles);
    }

    function isOrgAdmin(orgId) {
      return hasOrgRole(orgId, ['admin']);
    }

    function isOrgAdminOrManager(orgId) {
      return hasOrgRole(orgId, ['admin', 'manager']);
    }

    function isParentAdmin(parentId) {
      return request.auth != null
        && request.auth.token.parentAdmin == true
        && request.auth.token.parentId == parentId;
    }

    function isOwnAttendanceCreate(orgId) {
      return orgMembership(orgId)
        && request.auth.uid == request.resource.data.staffId
        && request.resource.data.tenantId == orgId
        && request.resource.data.status == 'pending'
        && !('approvedAt' in request.resource.data)
        && !('approvedBy' in request.resource.data);
    }

    function isValidAttendanceUpdate(orgId) {
      return request.resource.data.tenantId == orgId
        && resource.data.tenantId == orgId
        && request.resource.data.staffId == resource.data.staffId
        && !(request.method == 'delete');
    }

    match /orgs/{orgId} {
      allow read: if orgMembership(orgId);
      allow create, update: if isOrgAdmin(orgId) && userOrgMatches(orgId);
      allow delete: if false;

      match /members/{memberId} {
        allow read: if orgMembership(orgId);
        allow create, update: if isOrgAdmin(orgId) && userOrgMatches(orgId)
          && request.resource.data.orgId == orgId
          && request.resource.data.uid == memberId;
        allow delete: if false;
      }

      match /attendance/{attendanceId} {
        allow read: if orgMembership(orgId);
        allow create: if isOwnAttendanceCreate(orgId);
        allow update: if isOrgAdminOrManager(orgId) && isValidAttendanceUpdate(orgId);
        allow delete: if false;
      }

      match /shifts/{shiftId} {
        allow read: if orgMembership(orgId);
        allow create, update, delete: if isOrgAdminOrManager(orgId);
      }
    }

    match /parents/{parentId} {
      allow create, update, delete: if false;
      allow read: if isParentAdmin(parentId);

      match /contracts/{subOrgId} {
        allow read: if isParentAdmin(parentId) || isOrgAdmin(subOrgId);
        allow create, update, delete: if false;
      }

      match /ledgers/{periodId} {
        allow read: if isParentAdmin(parentId);
        allow create, update, delete: if false;

        match /lines/{lineId} {
          allow read: if isParentAdmin(parentId);
          allow create, update, delete: if false;
        }
      }
    }
  }
}