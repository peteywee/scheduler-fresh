rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of a specific org
    function isOrgMember(orgId) {
      return request.auth != null
        && exists(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid));
    }

    // Helper function to check if a user has a specific role in an org
    function hasOrgRole(orgId, role) {
      return isOrgMember(orgId)
        && get(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check for admin or manager role
    function isOrgAdminOrManager(orgId) {
      return isOrgMember(orgId)
        && (get(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid)).data.role in ['admin', 'manager']);
    }

    match /orgs/{orgId} {
      // Existing rules for orgs...
      allow read: if isOrgMember(orgId);
      allow write: if hasOrgRole(orgId, 'admin');

      // Rules for org members subcollection
      match /members/{memberId} {
        allow read: if isOrgMember(orgId);
        allow write: if hasOrgRole(orgId, 'admin');
      }

      // --- NEW RULES FOR SHIFTS ---
      match /shifts/{shiftId} {
        // Any member of the organization can read the schedule
        allow read: if isOrgMember(orgId);

        // Only admins or managers can create, update, or delete shifts
        allow write: if isOrgAdminOrManager(orgId);
      }
      // --- END NEW RULES ---
    }
  }
}