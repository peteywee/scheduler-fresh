rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    function isSignedIn() {
      return request.auth != null;
    }

    // Organization membership check with null-safe access
    function orgMemberPath(orgId) {
      return /databases/$(database)/documents/orgs/$(orgId)/staff/$(request.auth.uid);
    }

    function hasOrgMembership(orgId) {
      return isSignedIn() && exists(orgMemberPath(orgId));
    }

    function getOrgRole(orgId) {
      let memberPath = orgMemberPath(orgId);
      return exists(memberPath) ? get(memberPath).data.role : null;
    }

    function hasOrgRole(orgId, roles) {
      return hasOrgMembership(orgId) && (getOrgRole(orgId) in roles);
    }

    function isOrgAdmin(orgId) {
      return hasOrgRole(orgId, ['admin']);
    }

    function isOrgAdminOrManager(orgId) {
      return hasOrgRole(orgId, ['admin', 'manager']);
    }

    // Parent (Corporate Account) admin check using custom claims
    function isParentAdmin(parentId) {
      return isSignedIn()
        && request.auth.token.parentAdmin == true
        && request.auth.token.parentId == parentId;
    }

    // ============================================================================
    // CORPORATE ACCOUNTS (Parents) - Read-only for parent admins
    // ============================================================================

    match /corporate_accounts/{corpId} {
      allow read: if isParentAdmin(corpId);
      allow write: if false; // Server-side only

      // Contracts between parent and sub-orgs
      match /contracts/{contractId} {
        allow read: if isParentAdmin(corpId);
        allow write: if false; // Server-side only
      }

      // Ledgers - APPEND-ONLY, SERVER-SIDE ONLY, no PII
      match /ledgers/{periodId} {
        allow read: if isParentAdmin(corpId);
        allow write: if false; // Server-side only

        match /lines/{lineId} {
          allow read: if isParentAdmin(corpId);
          allow write: if false; // Server-side only
        }
      }
    }

    // ============================================================================
    // ORGANIZATIONS (Sub-Organizations) - Tenant-scoped
    // ============================================================================

    match /orgs/{orgId} {
      // Organization document
      allow read: if hasOrgMembership(orgId);
      allow create: if isSignedIn()
        && request.resource.data.ownerUid == request.auth.uid
        && request.resource.data.createdBy == request.auth.uid;
      allow update: if isOrgAdmin(orgId);
      allow delete: if false;

      // Staff members (formerly "members")
      match /staff/{staffId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if isOrgAdmin(orgId)
          && request.resource.data.id == staffId
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdmin(orgId)
          && request.resource.data.id == staffId
          && request.resource.data.orgId == orgId
          && resource.data.orgId == orgId;
        allow delete: if isOrgAdmin(orgId);
      }

      // Certifications
      match /certifications/{certId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if hasOrgMembership(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if (
            hasOrgMembership(orgId)
            && request.auth.uid == resource.data.staffId
          ) || isOrgAdminOrManager(orgId);
        allow delete: if isOrgAdminOrManager(orgId);
      }

      // Location Hierarchy: Venues
      match /venues/{venueId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId
          && resource.data.orgId == orgId;
        allow delete: if isOrgAdmin(orgId);
      }

      // Location Hierarchy: Zones
      match /zones/{zoneId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId
          && resource.data.orgId == orgId;
        allow delete: if isOrgAdmin(orgId);
      }

      // Location Hierarchy: Positions
      match /positions/{positionId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId
          && resource.data.orgId == orgId;
        allow delete: if isOrgAdmin(orgId);
      }

      // Shifts
      match /shifts/{shiftId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId
          && resource.data.orgId == orgId;
        allow delete: if isOrgAdminOrManager(orgId);
      }

      // Attendance - staff can create pending, admins approve
      match /attendance/{attendanceId} {
        allow read: if hasOrgMembership(orgId);
        
        // Staff can create their own pending attendance
        allow create: if hasOrgMembership(orgId)
          && request.auth.uid == request.resource.data.staffId
          && request.resource.data.tenantId == orgId
          && request.resource.data.status == "pending";
        
        // Staff can update their own pending attendance, admins can approve/reject
        allow update: if (
            hasOrgMembership(orgId)
            && request.auth.uid == resource.data.staffId
            && resource.data.status == "pending"
            && request.resource.data.status == "pending"
            && request.resource.data.staffId == resource.data.staffId
            && request.resource.data.tenantId == resource.data.tenantId
          ) || (
            isOrgAdminOrManager(orgId)
            && request.resource.data.staffId == resource.data.staffId
            && request.resource.data.tenantId == resource.data.tenantId
          );
        
        allow delete: if false; // No client-side deletes
      }

      // Tokens (for onboarding)
      match /tokens/{tokenId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if isOrgAdmin(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdmin(orgId)
          && request.resource.data.orgId == orgId
          && resource.data.orgId == orgId;
        allow delete: if isOrgAdmin(orgId);
      }
    }

    // ============================================================================
    // DEFAULT DENY ALL
    // ============================================================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}