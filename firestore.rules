rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /** ---------- Auth & Org Helpers ---------- **/
    function isSignedIn() {
      return request.auth != null;
    }

    function orgMemberDoc(orgId) {
      return /databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid);
    }

    function hasOrgMembership(orgId) {
      return isSignedIn() && exists(orgMemberDoc(orgId));
    }

    // Safe role getter (only called if membership exists)
    function orgRole(orgId) {
      return get(orgMemberDoc(orgId)).data.role;
    }

    // roles: array<string> e.g., ['admin'] or ['admin','manager']
    function hasOrgRole(orgId, roles) {
      return hasOrgMembership(orgId) && (orgRole(orgId) in roles);
    }

    function isOrgAdmin(orgId) {
      return hasOrgRole(orgId, ['admin']);
    }

    function isOrgAdminOrManager(orgId) {
      return hasOrgRole(orgId, ['admin', 'manager']);
    }

    function userDoc() {
      return /databases/$(database)/documents/users/$(request.auth.uid);
    }

    function userOrgMatches(orgId) {
      return isSignedIn()
        && exists(userDoc())
        && get(userDoc()).data.orgId == orgId;
    }

    // Parent portal via custom auth claims:
    //  - request.auth.token.parentAdmin == true
    //  - request.auth.token.parentId == parentId
    function isParentAdmin(parentId) {
      return isSignedIn()
        && request.auth.token.parentAdmin == true
        && request.auth.token.parentId == parentId;
    }

    /** ---------- Orgs Collection ---------- **/
    match /orgs/{orgId} {
      // Members can read org metadata
      allow read: if hasOrgMembership(orgId);

      // Creator writes must self-consistently point at their own UID & orgId
      allow create: if isSignedIn()
        && request.resource.data.ownerUid == request.auth.uid
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.orgId == orgId;

      // Admins update only their org, and user/org linkage must match
      allow update: if isOrgAdmin(orgId)
        && userOrgMatches(orgId)
        && request.resource.data.orgId == orgId
        && resource.data.orgId == orgId;

      // Never delete org documents via client
      allow delete: if false;

      /** --- orgs/{orgId}/members --- **/
      match /members/{memberId} {
        allow read: if hasOrgMembership(orgId);

        // Only admins can create/update members within their org,
        // enforcing uid & orgId immutability and alignment
        allow create: if isOrgAdmin(orgId)
          && request.resource.data.uid == memberId
          && request.resource.data.orgId == orgId;

        allow update: if isOrgAdmin(orgId)
          && request.resource.data.uid == memberId
          && request.resource.data.orgId == orgId;

        allow delete: if isOrgAdmin(orgId);
      }

      /** --- orgs/{orgId}/attendance --- **/
      match /attendance/{attendanceId} {
        allow read: if hasOrgMembership(orgId);

        // Staff can create their own "pending" entry under their org
        allow create: if hasOrgMembership(orgId)
          && request.auth.uid == request.resource.data.staffId
          && request.resource.data.tenantId == orgId
          && request.resource.data.status == "pending";

        // Staff may update their own pending record without escalating status;
        // Admin/Manager may update within same tenant/staff boundaries.
        allow update: if (
            hasOrgMembership(orgId)
            && request.auth.uid == resource.data.staffId
            && resource.data.status == "pending"
            && request.resource.data.status == "pending"
            && request.resource.data.staffId == resource.data.staffId
            && request.resource.data.tenantId == resource.data.tenantId
          ) || (
            isOrgAdminOrManager(orgId)
            && request.resource.data.staffId == resource.data.staffId
            && request.resource.data.tenantId == resource.data.tenantId
          );

        allow delete: if false;
      }

      /** --- orgs/{orgId}/joinRequests --- **/
      match /joinRequests/{requestId} {
        allow read: if (
            isSignedIn() && request.auth.uid == resource.data.requestedBy
          ) || isOrgAdminOrManager(orgId);

        allow create: if isSignedIn()
          && request.auth.uid == request.resource.data.requestedBy
          && request.resource.data.orgId == orgId;

        allow update: if isOrgAdminOrManager(orgId);

        allow delete: if isOrgAdminOrManager(orgId)
          || (isSignedIn() && request.auth.uid == resource.data.requestedBy);
      }

      /** --- orgs/{orgId}/invites --- **/
      match /invites/{inviteId} {
        allow read: if isOrgAdminOrManager(orgId);
        allow create: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId;
        allow delete: if isOrgAdminOrManager(orgId);
      }

      /** --- orgs/{orgId}/shifts --- **/
      match /shifts/{shiftId} {
        allow read: if hasOrgMembership(orgId);
        allow create: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId;
        allow update: if isOrgAdminOrManager(orgId)
          && request.resource.data.orgId == orgId
          && resource.data.orgId == orgId;
        allow delete: if isOrgAdminOrManager(orgId);
      }

      /** --- orgs/{orgId}/public --- **/
      match /public/{docId} {
        // Public read only if explicitly listed
        allow read: if resource.data.listed == true;
        // Only org admins/managers may write to public docs
        allow write: if isOrgAdminOrManager(orgId);
      }
    }

    /** ---------- Users (self) ---------- **/
    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow write: if false;
    }

    /** ---------- Parent Portal ---------- **/
    match /parents/{parentId} {
      allow read: if isParentAdmin(parentId);
      allow write: if false;

      match /contracts/{contractId} {
        allow read: if isParentAdmin(parentId);
        allow write: if false;
      }

      match /ledgers/{periodId} {
        allow read: if isParentAdmin(parentId);
        allow write: if false;

        match /lines/{lineId} {
          allow read: if isParentAdmin(parentId);
          allow write: if false;
        }
      }
    }

    /** ---------- Default deny ---------- **/
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
